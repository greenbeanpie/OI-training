{
	// Place your OI-training 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"C++ template": {
		"scope": "cpp",
		"prefix": "cpp",
		"description": "Default cpp file",
		"body": [
			"#include <bits/stdc++.h>",
			"//#include <bits/extc++.h>",
			"// using namespace __gnu_pbds;",
			"// using namespace __gnu_cxx;",
			"using namespace std;",
			"// #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt,lzcnt,abm,bmi,bmi2,fma,tune=native\")",
			"#define int long long",
			"#define double long double",
			"#define endl \"\\n\"",
			"#define gc() (p1 == p2 && (p2 = (p1 = ibuf) + fread(ibuf, 1, SIZE, stdin), p1 == p2) ? EOF : *p1++)\n",
			"namespace FastIO",
			"{",
			"	static constexpr int SIZE = 1 << 21;",
			"	char ibuf[SIZE], obuf[SIZE], *p1 = ibuf, *p2 = ibuf, *p3 = obuf;",
			"	inline void read(char &c)",
			"	{",
			"		for (c = gc(); !std::isgraph(c); c = gc())",
			"			;",
			"	}",
			"	inline void read(char *s)",
			"	{",
			"		char c = gc();",
			"		for (; !std::isgraph(c); c = gc())",
			"			;",
			"		for (; std::isgraph(c); c = gc())",
			"			*s++ = c;",
			"		*s = 0;",
			"	}",
			"	inline void read(std::string &s)",
			"	{",
			"		s.clear();",
			"		char c = gc();",
			"		for (; !std::isgraph(c); c = gc())",
			"			;",
			"		for (; std::isgraph(c); c = gc())",
			"			s.push_back(c);",
			"	}",
			"	inline void pc(char c)",
			"	{",
			"		if (p3 - obuf == SIZE)",
			"			fwrite(obuf, 1, SIZE, stdout), p3 = obuf;",
			"		*p3++ = c;",
			"	}",
			"	inline void write(char c) { pc(c); }",
			"	inline void write(const char *s)",
			"	{",
			"		while (*s)",
			"			pc(*s), ++s;",
			"	}",
			"	inline void write(std::string s)",
			"	{",
			"		for (const char c : s)",
			"			pc(c);",
			"	}",
			"	template <typename _Tp>",
			"	inline void read(_Tp &x)",
			"	{",
			"		x = 0;",
			"		char c = gc();",
			"		int f = 0;",
			"		for (; !std::isdigit(c); c = gc())",
			"			f |= c == '-';",
			"		for (; std::isdigit(c); c = gc())",
			"			x = (x << 1) + (x << 3) + (c ^ 48);",
			"		return f ? x = ~x + 1 : 1, void();",
			"	}",
			"	template <typename _Tp>",
			"	inline void write(_Tp x)",
			"	{",
			"		static int stk[40];",
			"		int tp = 0;",
			"		if (!x)",
			"			return pc('0'), void();",
			"		if (x < 0)",
			"			pc('-'), x = ~x + 1;",
			"		while (x)",
			"			stk[++tp] = x % 10, x /= 10;",
			"		while (tp)",
			"			pc(stk[tp--] + '0');",
			"	}",
			"	template <typename _Tp>",
			"	inline void writesp(_Tp x)",
			"	{",
			"		write(x);",
			"		pc(' ');",
			"	}",
			"	template <typename _Tp>",
			"	inline void writeln(_Tp x) { write(x), pc('\\n'); }",
			"	template <typename _Tp, typename... Args>",
			"	inline void read(_Tp &x, Args &...args) { read(x), read(args...); }",
			"	template <typename _Tp, typename... Args>",
			"	inline void write(_Tp x, Args... args) { write(x), write(args...); }",
			"	template <typename _Tp, typename... Args>",
			"	inline void writesp(_Tp x, Args... args) { writesp(x), writesp(args...); }",
			"	template <typename _Tp, typename... Args>",
			"	inline void writeln(_Tp x, Args... args) { writeln(x), writeln(args...); }",
			"	inline void flush() { fwrite(obuf, p3 - obuf, 1, stdout); }",
			"}",
			"void FileIO(string s){",
			"	freopen((s+\".in\").c_str(),\"r\",stdin);"
			"	freopen((s+\".out\").c_str(),\"w\",stdout);"
			"}",
			"#define const constexpr",
			"",
			"namespace Main{",
			"",
			"	int main(){",
			"",
			"		return 0;"
			"	}""};",
			"",
			"signed main(){",
			"#ifndef ONLINE_JUDGE",
		 "	FileIO(\"\");",
			"#endif",
		 "	ios::sync_with_stdio(false);",
		 "	cin.tie(0),cout.tie(0);",
		"	Main::main();",
		"	FastIO::flush();"
		"	return 0;",
			"}"
		],
	},"C++ Generator template": {
		"scope": "cpp",
		"prefix": "generator",
		"description": "Default cpp generator file",
		"body": [
			"#include <bits/stdc++.h>",
			"#include <bits/extc++.h>",
			"using namespace __gnu_pbds;",
			"using namespace __gnu_cxx;",
			"using namespace std;",
			"#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt,lzcnt,abm,bmi,bmi2,fma,tune=native\")",
			"#define int __int128",
			"#define double long double",
			"#define endl \"\\n\"",
			"#define gc() (p1 == p2 && (p2 = (p1 = ibuf) + fread(ibuf, 1, SIZE, stdin), p1 == p2) ? EOF : *p1++)\n",
			"namespace FastIO",
			"{",
			"	static constexpr int SIZE = 1 << 21;",
			"	char ibuf[SIZE], obuf[SIZE], *p1 = ibuf, *p2 = ibuf, *p3 = obuf;",
			"	inline void read(char &c)",
			"	{",
			"		for (c = gc(); !std::isgraph(c); c = gc())",
			"			;",
			"	}",
			"	inline void read(char *s)",
			"	{",
			"		char c = gc();",
			"		for (; !std::isgraph(c); c = gc())",
			"			;",
			"		for (; std::isgraph(c); c = gc())",
			"			*s++ = c;",
			"		*s = 0;",
			"	}",
			"	inline void read(std::string &s)",
			"	{",
			"		s.clear();",
			"		char c = gc();",
			"		for (; !std::isgraph(c); c = gc())",
			"			;",
			"		for (; std::isgraph(c); c = gc())",
			"			s.push_back(c);",
			"	}",
			"	inline void pc(char c)",
			"	{",
			"		if (p3 - obuf == SIZE)",
			"			fwrite(obuf, 1, SIZE, stdout), p3 = obuf;",
			"		*p3++ = c;",
			"	}",
			"	inline void write(char c) { pc(c); }",
			"	inline void write(const char *s)",
			"	{",
			"		while (*s)",
			"			pc(*s), ++s;",
			"	}",
			"	inline void write(std::string s)",
			"	{",
			"		for (const char c : s)",
			"			pc(c);",
			"	}",
			"	template <typename _Tp>",
			"	inline void read(_Tp &x)",
			"	{",
			"		x = 0;",
			"		char c = gc();",
			"		int f = 0;",
			"		for (; !std::isdigit(c); c = gc())",
			"			f |= c == '-';",
			"		for (; std::isdigit(c); c = gc())",
			"			x = (x << 1) + (x << 3) + (c ^ 48);",
			"		return f ? x = ~x + 1 : 1, void();",
			"	}",
			"	template <typename _Tp>",
			"	inline void write(_Tp x)",
			"	{",
			"		static int stk[40];",
			"		int tp = 0;",
			"		if (!x)",
			"			return pc('0'), void();",
			"		if (x < 0)",
			"			pc('-'), x = ~x + 1;",
			"		while (x)",
			"			stk[++tp] = x % 10, x /= 10;",
			"		while (tp)",
			"			pc(stk[tp--] + '0');",
			"	}",
			"	template <typename _Tp>",
			"	inline void writesp(_Tp x)",
			"	{",
			"		write(x);",
			"		pc(' ');",
			"	}",
			"	template <typename _Tp>",
			"	inline void writeln(_Tp x) { write(x), pc('\\n'); }",
			"	template <typename _Tp, typename... Args>",
			"	inline void read(_Tp &x, Args &...args) { read(x), read(args...); }",
			"	template <typename _Tp, typename... Args>",
			"	inline void write(_Tp x, Args... args) { write(x), write(args...); }",
			"	template <typename _Tp, typename... Args>",
			"	inline void writesp(_Tp x, Args... args) { writesp(x), writesp(args...); }",
			"	template <typename _Tp, typename... Args>",
			"	inline void writeln(_Tp x, Args... args) { writeln(x), writeln(args...); }",
			"	inline void flush() { fwrite(obuf, p3 - obuf, 1, stdout); }",
			"}",
			"#define const constexpr",
			"",
			"namespace Main{",
			"	int l=0,r=INT_MAX;"
			"	random_device rd;",
			"	sfmt19937_64 myrand(rd());",
			"	uniform_int_distribution<> dist(l,r);",
			"	",
			"	int gen(){",
			"",
			"		return 0;"
			"	}""};",
			"",
			"void FileIO(string s){",
			"	freopen((s+\".in\").c_str(),\"w\",stdout);"
			"}",
			"signed main(){",
			"#ifndef ONLINE_JUDGE",
		"	FileIO(\"\");",
			"#endif",
		"	ios::sync_with_stdio(false);",
		"	cin.tie(0),cout.tie(0);",
		"	Main::gen();",
		"	FastIO::flush();"
		"	return 0;",
			"}"
		],
	},
	"lowbit": {
		"scope": "cpp",
		"prefix": "lowbit",
		"description": "lowbit function",
		"body": [
			"int lowbit(int x)",
			"{",
			"	return x&(-x);",
			"}"
		],
	},
	"FastIO": {
		"scope": "cpp",
		"prefix": "FastIO",
		"description": "FastIO",
		"body": [
			"#define gc() (p1 == p2 && (p2 = (p1 = ibuf) + fread(ibuf, 1, SIZE, stdin), p1 == p2) ? EOF : *p1++)\nnamespace FastIO { static constexpr int SIZE = 1 << 21; char ibuf[SIZE], obuf[SIZE], *p1 = ibuf, *p2 = ibuf, *p3 = obuf; inline void read(char& c) { for(c = gc(); !std::isgraph(c); c = gc()); } inline void read(char* s) { char c = gc(); for(; !std::isgraph(c); c = gc());for(; std::isgraph(c); c = gc()) *s++ = c; *s = 0; } inline void read(std::string& s) { s.clear(); char c = gc(); for(; !std::isgraph(c); c = gc()); for(; std::isgraph(c); c = gc()) s.push_back(c); } inline void pc(char c) { if(p3 - obuf == SIZE) fwrite(obuf, 1, SIZE, stdout), p3 = obuf; *p3++ = c; } inline void write(char c) { pc(c); } inline void write(const char* s) { while(*s) pc(*s), ++s; } inline void write(std::string s) { for(const char c : s) pc(c); } template<typename _Tp>inline void read(_Tp& x) { x = 0; char c = gc(); int f = 0; for(; !std::isdigit(c); c = gc()) f |= c == '-'; for(; std::isdigit(c); c = gc()) x = (x << 1) + (x << 3) + (c ^ 48); return f ? x = ~x + 1 : 1, void(); } template<typename _Tp>inline void write(_Tp x) { static int stk[40]; int tp = 0; if(!x) return pc('0'), void(); if(x < 0) pc('-'), x = ~x + 1; while(x) stk[++tp] = x % 10, x /= 10; while(tp) pc(stk[tp--] + '0'); } template<typename _Tp>inline void writesp(_Tp x) { write(x); pc(' '); } template<typename _Tp>inline void writeln(_Tp x) { write(x), pc('\\n'); } template<typename _Tp, typename ...Args>inline void read(_Tp& x, Args& ...args) { read(x), read(args...); } template<typename _Tp, typename ...Args>inline void write(_Tp x, Args ...args) { write(x), write(args...); } template<typename _Tp, typename ...Args>inline void writesp(_Tp x, Args ...args) { writesp(x), writesp(args...); } template<typename _Tp, typename ...Args>inline void writeln(_Tp x, Args ...args) { writeln(x), writeln(args...); } inline void flush() { fwrite(obuf, p3 - obuf, 1, stdout); } }\n"
		]
	},
	"Train Header"{
		"scope": "cpp",
		"prefix": "theader",
		"description": "A lot of optimizations.",
		"body": [
			"// These pragmas are generated by Python because of the requirement from $Na_2S_2O_3$ .",
			"#ifndef ONLINE_JUDGE",
			"#pragma GCC optimize(\"-O1\")",
			"#pragma GCC optimize(\"-O2\")",
			"#pragma GCC optimize(\"-O3\")",
			"#pragma GCC optimize(\"-Ofast\")",
			"#pragma GCC optimize(\"-Og\")",
			"#pragma GCC optimize(\"-Os\")",
			"#pragma GCC optimize(\"-Oz\")",
			"#pragma GCC optimize(\"-faggressive-loop-optimizations\")",
			"#pragma GCC optimize(\"-falign-functions\")",
			"#pragma GCC optimize(\"-falign-functions=\")",
			"#pragma GCC optimize(\"-falign-jumps\")",
			"#pragma GCC optimize(\"-falign-jumps=\")",
			"#pragma GCC optimize(\"-falign-labels\")",
			"#pragma GCC optimize(\"-falign-labels=\")",
			"#pragma GCC optimize(\"-falign-loops\")",
			"#pragma GCC optimize(\"-falign-loops=\")",
			"#pragma GCC optimize(\"-fallocation-dce\")",
			"#pragma GCC optimize(\"-fallow-store-data-races\")",
			"#pragma GCC optimize(\"-fassociative-math\")",
			"#pragma GCC optimize(\"-fasynchronous-unwind-tables\")",
			"#pragma GCC optimize(\"-fauto-inc-dec\")",
			"#pragma GCC optimize(\"-fbit-tests\")",
			"#pragma GCC optimize(\"-fbranch-count-reg\")",
			"#pragma GCC optimize(\"-fbranch-probabilities\")",
			"#pragma GCC optimize(\"-fcaller-saves\")",
			"#pragma GCC optimize(\"-fcode-hoisting\")",
			"#pragma GCC optimize(\"-fcombine-stack-adjustments\")",
			"#pragma GCC optimize(\"-fcompare-elim\")",
			"#pragma GCC optimize(\"-fconserve-stack\")",
			"#pragma GCC optimize(\"-fcprop-registers\")",
			"#pragma GCC optimize(\"-fcrossjumping\")",
			"#pragma GCC optimize(\"-fcse-follow-jumps\")",
			"#pragma GCC optimize(\"-fcx-fortran-rules\")",
			"#pragma GCC optimize(\"-fcx-limited-range\")",
			"#pragma GCC optimize(\"-fdce\")",
			"#pragma GCC optimize(\"-fdefer-pop\")",
			"#pragma GCC optimize(\"-fdelayed-branch\")",
			"#pragma GCC optimize(\"-fdelete-dead-exceptions\")",
			"#pragma GCC optimize(\"-fdelete-null-pointer-checks\")",
			"#pragma GCC optimize(\"-fdevirtualize\")",
			"#pragma GCC optimize(\"-fdevirtualize-speculatively\")",
			"#pragma GCC optimize(\"-fdse\")",
			"#pragma GCC optimize(\"-fearly-inlining\")",
			"#pragma GCC optimize(\"-fexceptions\")",
			"#pragma GCC optimize(\"-fexcess-precision=[fast|standard|16]\")",
			"#pragma GCC optimize(\"-fexpensive-optimizations\")",
			"#pragma GCC optimize(\"-ffast-math\")",
			"#pragma GCC optimize(\"-ffinite-loops\")",
			"#pragma GCC optimize(\"-ffinite-math-only\")",
			"#pragma GCC optimize(\"-ffloat-store\")",
			"#pragma GCC optimize(\"-ffold-simple-inlines\")",
			"#pragma GCC optimize(\"-fforward-propagate\")",
			"#pragma GCC optimize(\"-ffp-contract=[off|on|fast]\")",
			"#pragma GCC optimize(\"-ffp-int-builtin-inexact\")",
			"#pragma GCC optimize(\"-ffunction-cse\")",
			"#pragma GCC optimize(\"-fgcse\")",
			"#pragma GCC optimize(\"-fgcse-after-reload\")",
			"#pragma GCC optimize(\"-fgcse-las\")",
			"#pragma GCC optimize(\"-fgcse-lm\")",
			"#pragma GCC optimize(\"-fgcse-sm\")",
			"#pragma GCC optimize(\"-fgraphite\")",
			"#pragma GCC optimize(\"-fgraphite-identity\")",
			"#pragma GCC optimize(\"-fguess-branch-probability\")",
			"#pragma GCC optimize(\"-fhandle-exceptions\")",
			"#pragma GCC optimize(\"-fexceptions.\")",
			"#pragma GCC optimize(\"-fharden-compares\")",
			"#pragma GCC optimize(\"-fharden-conditional-branches\")",
			"#pragma GCC optimize(\"-fhoist-adjacent-loads\")",
			"#pragma GCC optimize(\"-fif-conversion\")",
			"#pragma GCC optimize(\"-fif-conversion2\")",
			"#pragma GCC optimize(\"-findirect-inlining\")",
			"#pragma GCC optimize(\"-finline\")",
			"#pragma GCC optimize(\"-finline-atomics\")",
			"#pragma GCC optimize(\"-finline-functions\")",
			"#pragma GCC optimize(\"-finline-functions-called-once\")",
			"#pragma GCC optimize(\"-finline-small-functions\")",
			"#pragma GCC optimize(\"-fipa-bit-cp\")",
			"#pragma GCC optimize(\"-fipa-cp\")",
			"#pragma GCC optimize(\"-fipa-cp-clone\")",
			"#pragma GCC optimize(\"-fipa-icf\")",
			"#pragma GCC optimize(\"-fipa-icf-functions\")",
			"#pragma GCC optimize(\"-fipa-icf-variables\")",
			"#pragma GCC optimize(\"-fipa-modref\")",
			"#pragma GCC optimize(\"-fipa-profile\")",
			"#pragma GCC optimize(\"-fipa-pta\")",
			"#pragma GCC optimize(\"-fipa-pure-const\")",
			"#pragma GCC optimize(\"-fipa-ra\")",
			"#pragma GCC optimize(\"-fipa-reference\")",
			"#pragma GCC optimize(\"-fipa-reference-addressable\")",
			"#pragma GCC optimize(\"-fipa-sra\")",
			"#pragma GCC optimize(\"-fipa-stack-alignment\")",
			"#pragma GCC optimize(\"-fipa-strict-aliasing\")",
			"#pragma GCC optimize(\"-fipa-vrp\")",
			"#pragma GCC optimize(\"-fira-algorithm=[CB|priority]\")",
			"#pragma GCC optimize(\"-fira-hoist-pressure\")",
			"#pragma GCC optimize(\"-fira-loop-pressure\")",
			"#pragma GCC optimize(\"-fira-region=[one|all|mixed]\")",
			"#pragma GCC optimize(\"-fira-share-save-slots\")",
			"#pragma GCC optimize(\"-fira-share-spill-slots\")",
			"#pragma GCC optimize(\"-fisolate-erroneous-paths-attribute\")",
			"#pragma GCC optimize(\"-fisolate-erroneous-paths-dereference\")",
			"#pragma GCC optimize(\"-fivopts\")",
			"#pragma GCC optimize(\"-fjump-tables\")",
			"#pragma GCC optimize(\"-fkeep-gc-roots-live\")",
			"#pragma GCC optimize(\"-flifetime-dse\")",
			"#pragma GCC optimize(\"-flifetime-dse=<0,2>\")",
			"#pragma GCC optimize(\"-flimit-function-alignment\")",
			"#pragma GCC optimize(\"-flive-patching\")",
			"#pragma GCC optimize(\"-flive-patching=inline-clone\")",
			"#pragma GCC optimize(\"-flive-patching=[inline-only-static|inline-clone]\")",
			"#pragma GCC optimize(\"-flive-range-shrinkage\")",
			"#pragma GCC optimize(\"-floop-interchange\")",
			"#pragma GCC optimize(\"-floop-nest-optimize\")",
			"#pragma GCC optimize(\"-floop-parallelize-all\")",
			"#pragma GCC optimize(\"-floop-unroll-and-jam\")",
			"#pragma GCC optimize(\"-flra-remat\")",
			"#pragma GCC optimize(\"-fmath-errno\")",
			"#pragma GCC optimize(\"-fmodulo-sched\")",
			"#pragma GCC optimize(\"-fmodulo-sched-allow-regmoves\")",
			"#pragma GCC optimize(\"-fmove-loop-invariants\")",
			"#pragma GCC optimize(\"-fmove-loop-stores\")",
			"#pragma GCC optimize(\"-fnon-call-exceptions\")",
			"#pragma GCC optimize(\"-fnothrow-opt\")",
			"#pragma GCC optimize(\"-fomit-frame-pointer\")",
			"#pragma GCC optimize(\"-fopenmp-target-simd-clone=\")",
			"#pragma GCC optimize(\"-fopt-info\")",
			"#pragma GCC optimize(\"-foptimize-sibling-calls\")",
			"#pragma GCC optimize(\"-foptimize-strlen\")",
			"#pragma GCC optimize(\"-fpack-struct\")",
			"#pragma GCC optimize(\"-fpack-struct=<number>\")",
			"#pragma GCC optimize(\"-fpartial-inlining\")",
			"#pragma GCC optimize(\"-fpatchable-function-entry=\")",
			"#pragma GCC optimize(\"-fpeel-loops\")",
			"#pragma GCC optimize(\"-fpeephole\")",
			"#pragma GCC optimize(\"-fpeephole2\")",
			"#pragma GCC optimize(\"-fplt\")",
			"#pragma GCC optimize(\"-fpredictive-commoning\")",
			"#pragma GCC optimize(\"-fprefetch-loop-arrays\")",
			"#pragma GCC optimize(\"-fprintf-return-value\")",
			"#pragma GCC optimize(\"-fprofile-partial-training\")",
			"#pragma GCC optimize(\"-fprofile-reorder-functions\")",
			"#pragma GCC optimize(\"-freciprocal-math\")",
			"#pragma GCC optimize(\"-fassociative-math\")",
			"#pragma GCC optimize(\"-free\")",
			"#pragma GCC optimize(\"-freg-struct-return\")",
			"#pragma GCC optimize(\"-frename-registers\")",
			"#pragma GCC optimize(\"-freorder-blocks\")",
			"#pragma GCC optimize(\"-freorder-blocks-algorithm=[simple|stc]\")",
			"#pragma GCC optimize(\"-freorder-blocks-and-partition\")",
			"#pragma GCC optimize(\"-freorder-functions\")",
			"#pragma GCC optimize(\"-frerun-cse-after-loop\")",
			"#pragma GCC optimize(\"-freschedule-modulo-scheduled-loops\")",
			"#pragma GCC optimize(\"-frounding-math\")",
			"#pragma GCC optimize(\"-frtti\")",
			"#pragma GCC optimize(\"-fsave-optimization-record\")",
			"#pragma GCC optimize(\"-fsched-critical-path-heuristic\")",
			"#pragma GCC optimize(\"-fsched-dep-count-heuristic\")",
			"#pragma GCC optimize(\"-fsched-group-heuristic\")",
			"#pragma GCC optimize(\"-fsched-interblock\")",
			"#pragma GCC optimize(\"-fsched-last-insn-heuristic\")",
			"#pragma GCC optimize(\"-fsched-pressure\")",
			"#pragma GCC optimize(\"-fsched-rank-heuristic\")",
			"#pragma GCC optimize(\"-fsched-spec\")",
			"#pragma GCC optimize(\"-fsched-spec-insn-heuristic\")",
			"#pragma GCC optimize(\"-fsched-spec-load\")",
			"#pragma GCC optimize(\"-fsched-spec-load-dangerous\")",
			"#pragma GCC optimize(\"-fsched-stalled-insns\")",
			"#pragma GCC optimize(\"-fsched-stalled-insns-dep\")",
			"#pragma GCC optimize(\"-fsched-stalled-insns-dep=<number>\")",
			"#pragma GCC optimize(\"-fsched-stalled-insns=<number>\")",
			"#pragma GCC optimize(\"-fsched2-use-superblocks\")",
			"#pragma GCC optimize(\"-fschedule-fusion\")",
			"#pragma GCC optimize(\"-fschedule-insns\")",
			"#pragma GCC optimize(\"-fschedule-insns2\")",
			"#pragma GCC optimize(\"-fsection-anchors\")",
			"#pragma GCC optimize(\"-fsel-sched-pipelining\")",
			"#pragma GCC optimize(\"-fsel-sched-pipelining-outer-loops\")",
			"#pragma GCC optimize(\"-fsel-sched-reschedule-pipelined\")",
			"#pragma GCC optimize(\"-fselective-scheduling\")",
			"#pragma GCC optimize(\"-fselective-scheduling2\")",
			"#pragma GCC optimize(\"-fsemantic-interposition\")",
			"#pragma GCC optimize(\"-fset-stack-executable\")",
			"#pragma GCC optimize(\"-fshort-enums\")",
			"#pragma GCC optimize(\"-fshort-wchar\")",
			"#pragma GCC optimize(\"-fshrink-wrap\")",
			"#pragma GCC optimize(\"-fshrink-wrap-separate\")",
			"#pragma GCC optimize(\"-fsignaling-nans\")",
			"#pragma GCC optimize(\"-fsigned-zeros\")",
			"#pragma GCC optimize(\"-fsimd-cost-model=[unlimited|dynamic|cheap|very-cheap]\")",
			"#pragma GCC optimize(\"-fsingle-precision-constant\")",
			"#pragma GCC optimize(\"-fsplit-ivs-in-unroller\")",
			"#pragma GCC optimize(\"-fsplit-loops\")",
			"#pragma GCC optimize(\"-fsplit-paths\")",
			"#pragma GCC optimize(\"-fsplit-wide-types\")",
			"#pragma GCC optimize(\"-fsplit-wide-types-early\")",
			"#pragma GCC optimize(\"-fssa-backprop\")",
			"#pragma GCC optimize(\"-fssa-phiopt\")",
			"#pragma GCC optimize(\"-fstack-check=[no|generic|specific]\")",
			"#pragma GCC optimize(\"-fstack-clash-protection\")",
			"#pragma GCC optimize(\"-fstack-protector\")",
			"#pragma GCC optimize(\"-fstack-protector-all\")",
			"#pragma GCC optimize(\"-fstack-protector-explicit\")",
			"#pragma GCC optimize(\"-fstack-protector-strong\")",
			"#pragma GCC optimize(\"-fstack-reuse=[all|named_vars|none]\")",
			"#pragma GCC optimize(\"-fstdarg-opt\")",
			"#pragma GCC optimize(\"-fstore-merging\")",
			"#pragma GCC optimize(\"-fstrict-aliasing\")",
			"#pragma GCC optimize(\"-fstrict-enums\")",
			"#pragma GCC optimize(\"-fstrict-volatile-bitfields\")",
			"#pragma GCC optimize(\"-fthread-jumps\")",
			"#pragma GCC optimize(\"-fno-threadsafe-statics\")",
			"#pragma GCC optimize(\"-ftoplevel-reorder\")",
			"#pragma GCC optimize(\"-ftracer\")",
			"#pragma GCC optimize(\"-ftrapping-math\")",
			"#pragma GCC optimize(\"-ftrapv\")",
			"#pragma GCC optimize(\"-ftree-bit-ccp\")",
			"#pragma GCC optimize(\"-ftree-builtin-call-dce\")",
			"#pragma GCC optimize(\"-ftree-ccp\")",
			"#pragma GCC optimize(\"-ftree-ch\")",
			"#pragma GCC optimize(\"-ftree-coalesce-vars\")",
			"#pragma GCC optimize(\"-ftree-copy-prop\")",
			"#pragma GCC optimize(\"-ftree-cselim\")",
			"#pragma GCC optimize(\"-ftree-dce\")",
			"#pragma GCC optimize(\"-ftree-dominator-opts\")",
			"#pragma GCC optimize(\"-ftree-dse\")",
			"#pragma GCC optimize(\"-ftree-forwprop\")",
			"#pragma GCC optimize(\"-ftree-fre\")",
			"#pragma GCC optimize(\"-ftree-loop-distribute-patterns\")",
			"#pragma GCC optimize(\"-ftree-loop-distribution\")",
			"#pragma GCC optimize(\"-ftree-loop-if-convert\")",
			"#pragma GCC optimize(\"-ftree-loop-im\")",
			"#pragma GCC optimize(\"-ftree-loop-ivcanon\")",
			"#pragma GCC optimize(\"-ftree-loop-optimize\")",
			"#pragma GCC optimize(\"-ftree-loop-vectorize\")",
			"#pragma GCC optimize(\"-ftree-lrs\")",
			"#pragma GCC optimize(\"-ftree-parallelize-loops=<number>\")",
			"#pragma GCC optimize(\"-ftree-partial-pre\")",
			"#pragma GCC optimize(\"-ftree-phiprop\")",
			"#pragma GCC optimize(\"-ftree-pre\")",
			"#pragma GCC optimize(\"-ftree-pta\")",
			"#pragma GCC optimize(\"-ftree-reassoc\")",
			"#pragma GCC optimize(\"-ftree-scev-cprop\")",
			"#pragma GCC optimize(\"-ftree-sink\")",
			"#pragma GCC optimize(\"-ftree-slp-vectorize\")",
			"#pragma GCC optimize(\"-ftree-slsr\")",
			"#pragma GCC optimize(\"-ftree-sra\")",
			"#pragma GCC optimize(\"-ftree-switch-conversion\")",
			"#pragma GCC optimize(\"-ftree-tail-merge\")",
			"#pragma GCC optimize(\"-ftree-ter\")",
			"#pragma GCC optimize(\"-ftree-vectorize\")",
			"#pragma GCC optimize(\"-ftree-vrp\")",
			"#pragma GCC optimize(\"-ftrivial-auto-var-init=[uninitialized|pattern|zero]\")",
			"#pragma GCC optimize(\"-funconstrained-commons\")",
			"#pragma GCC optimize(\"-funreachable-traps\")",
			"#pragma GCC optimize(\"-funroll-all-loops\")",
			"#pragma GCC optimize(\"-funroll-completely-grow-size\")",
			"#pragma GCC optimize(\"-funroll-loops\")",
			"#pragma GCC optimize(\"-funsafe-math-optimizations\")",
			"#pragma GCC optimize(\"-funswitch-loops\")",
			"#pragma GCC optimize(\"-funwind-tables\")",
			"#pragma GCC optimize(\"-fvar-tracking\")",
			"#pragma GCC optimize(\"-fvar-tracking-assignments\")",
			"#pragma GCC optimize(\"-fvar-tracking-assignments-toggle\")",
			"#pragma GCC optimize(\"-fvar-tracking-uninit\")",
			"#pragma GCC optimize(\"-fvariable-expansion-in-unroller\")",
			"#pragma GCC optimize(\"-fvect-cost-model=[unlimited|dynamic|cheap|very-cheap]\")",
			"#pragma GCC optimize(\"-fversion-loops-for-strides\")",
			"#pragma GCC optimize(\"-fvpt\")",
			"#pragma GCC optimize(\"-fweb\")",
			"#pragma GCC optimize(\"-fwrapv\")",
			"#pragma GCC optimize(\"-fwrapv-pointer\")",
			"#pragma GCC optimize(\"-gstatement-frontiers\")",
			"#endif",
		]
	}
}